@model RestaurantsPlatform.Web.ViewModels.Categories.DetailsCategoryViewModel

@{
    ViewData["Title"] = Model.Name;
}


<div class="border-info">
    <h1 class="text-center m-4">@Model.Name</h1>
    <p class="text-center">
        @Model.Description
    </p>
</div>

<div class="row d-flex justify-content-around">
    @foreach (var restaurant in Model.Restaurants)
    {
        string imageUrl = "https://res.cloudinary.com/djlskbceh/image/upload/v1585916924/restaurant/NoImage_lq3vxk.png";
        if (restaurant.Images == null || restaurant.Images.FirstOrDefault() == null)
        {
            imageUrl = "https://res.cloudinary.com/djlskbceh/image/upload/v1585916924/restaurant/NoImage_lq3vxk.png";
        }

        <div class="col-6 media mt-5">
            <img src="@imageUrl" class="mr-3 restaurantImage" alt="@restaurant.RestaurantName">
            <div class="media-body">
                <h5>@restaurant.RestaurantName</h5>
                <div class="workingTime">@restaurant.WorkingTime</div>
                <div class="badge badge-pill status"></div>
                <hr class="mb-3" />
                <p>@restaurant.Address</p>
                <div>
                    <a asp-route="restaurant" asp-route-id="@restaurant.Id" asp-route-name="@restaurant.ParsedUrlName" class="btn btn-outline-success btn-sm">Details</a>
                    <a class="likeBtn btn btn-outline-danger btn-sm"><i class="fa-heart fa-w-16"></i></a>
                </div>
            </div>
        </div>
    }
</div>

@section scripts{
    <script type="text/javascript">
        const likesBtn = document.getElementsByClassName('likeBtn');

        Array.from(likesBtn).forEach(likeBtn => {

            const icon = likeBtn.getElementsByTagName('i')[0];

            icon.classList.add('far');
            icon.classList.add('text-danger');

            likeBtn.addEventListener('mouseover', function () {
                icon.classList.add('text-white');
                icon.classList.remove('text-danger');
            });
            likeBtn.addEventListener('mouseout', function () {
                icon.classList.remove('text-white');
                icon.classList.add('text-danger');
            });
            likeBtn.addEventListener('click', function () {
                if (icon.classList.contains('fa')) {
                    icon.classList.remove('fa');
                    icon.classList.add('far');
                } else {
                    icon.classList.remove('far');
                    icon.classList.add('fa');
                }
            });
        });

        const workingTimes = document.getElementsByClassName('workingTime');
        var today = new Date();

        Array.from(workingTimes).forEach(element => {
            const statusElement = element.parentNode.parentNode.getElementsByClassName('status')[0];

            statusElement.classList.remove('badge-success');
            statusElement.classList.remove('badge-danger');

            const times = element.innerText.split(' - ').filter(x => x);
            const opening = times[0].split(':').map(x => +x);
            let closing = times[1].split(':').map(x => +x);

            if (opening[0] > closing[0]) {
                closing[0] += 24;
            }

            if (today.getHours() > opening[0]
                && today.getHours() < closing[0]) {
                statusElement.innerText = 'OPEN';
                statusElement.classList.add('badge-success');
            } else if (today.getHours() === opening[0] && today.getMinutes() >= opening[1]) {
                statusElement.innerText = 'OPEN';
                statusElement.classList.add('badge-success');
            } else if (today.getHours() === closing[0] && today.getMinutes() < closing[1]) {
                statusElement.innerText = 'OPEN';
                statusElement.classList.add('badge-success');
            }
            else {
                statusElement.innerText = 'CLOSED';
                statusElement.classList.add('badge-danger');
            }
        });
    </script>
}