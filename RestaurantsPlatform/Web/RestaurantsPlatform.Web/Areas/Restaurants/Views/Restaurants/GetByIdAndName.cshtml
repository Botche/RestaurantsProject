@inject Microsoft.Extensions.Configuration.IConfiguration Configuration
@model DetailsRestaurantViewModel

@{
    ViewData["Title"] = Model.RestaurantName;
}

<div>
    <h1 class="text-center m-4">
        <span class="float-md-left">
            @if (Model.UserId == this.User.FindFirstValue(ClaimTypes.NameIdentifier))
            {
                <a class="btn btn-outline-primary" asp-route="restaurantWithAction" asp-route-id="@Model.Id" asp-route-name="@Model.RestaurantUrl" asp-route-action="update">
                    Update
                </a>
                <a class="btn btn-outline-danger" asp-route="restaurantWithAction" asp-route-id="@Model.Id" asp-route-name="@Model.RestaurantUrl" asp-route-action="delete">
                    Delete
                </a>
            }
        </span>
        @Model.RestaurantName
        <span class="badge badge-pill status">Open</span>
        @if (this.User.Identity.IsAuthenticated)
        {
            @if (Model.IsFavourite)
            {
                <a class="likeBtn"><i class="heartIcon fa-heart fa float-right d-none d-sm-block"></i></a>
            }
            else
            {
                <a class="likeBtn"><i class="heartIcon fa-heart far float-right d-none d-sm-block"></i></a>
            }
        }
    </h1>
    <form class="d-none" id="favourites">@Html.AntiForgeryToken() <input asp-for="Id" /></form>
</div>
<hr />
<div class="row mb-4">
    <div class="col-12 col-md-6">
        <div class="border rounded-lg pl-3 pt-4 h-100">
            <dl>
                <dt class="col-sm-2">@Html.DisplayNameFor(model => model.RestaurantName)</dt>
                <dd id="RestaurantName" class="col-sm-10">@Html.DisplayFor(model => model.RestaurantName)</dd>
                <dt class="col-sm-2">@Html.DisplayNameFor(model => model.Description)</dt>
                <dd class="col-sm-10">
                    @if (Model.Description != null)
                    {
                        @Html.DisplayFor(model => model.Description)
                    }
                    else
                    {
                        <span>No information was given!</span>
                    }
                </dd>
                <dt class="col-sm-2">@Html.DisplayNameFor(model => model.Address)</dt>
                <dd class="col-sm-10">@Html.DisplayFor(model => model.Address)</dd>
                <dt class="col-sm-2">@Html.DisplayNameFor(model => model.OwnerName)</dt>
                <dd class="col-sm-10">
                    @if (Model.OwnerName != null)
                    {
                        @Html.DisplayFor(model => model.OwnerName)
                    }
                    else
                    {
                        <span>No information was given!</span>
                    }
                </dd>
                <dt class="col-sm-2">@Html.DisplayNameFor(model => model.WorkingTime)</dt>
                <dd class="col-sm-10 workingTime">@Html.DisplayFor(model => model.WorkingTime)</dd>
                <dt class="col-sm-2">@Html.DisplayNameFor(model => model.ContactInfo)</dt>
                <dd class="col-sm-10">@Html.DisplayFor(model => model.ContactInfo)</dd>
            </dl>
        </div>
    </div>
    <div class="rounded-lg col-12 col-md-6 bg-secondary" id="map"></div>
</div>

<partial name="./PartialViews/_GalleryPartialView" model="Model" />

@if (this.Model.Comments.Any())
{
    <div class="mt-5 border comments-container">
        <partial name="./PartialViews/_CommentsView" model="Model" />
    </div>
}

@if (this.User.Identity.IsAuthenticated)
{
    <partial name="./PartialViews/_CommentsFormPartialView" model="Model" />
}

<a id="scrollToTop" class="btn btn-lg btn-secondary button-to-top rounded-circle">
    <i class="fas fa-arrow-up"></i>
</a>

@section scripts {
    <script type="text/javascript" src="~/js/functions/determinateRestaurantStatusByWorkingTime.js" asp-append-version="true"></script>
    <script type="text/javascript" src="~/js/functions/scrollsToTopFunction.js" asp-append-version="true"></script>
    @if (this.User.Identity.IsAuthenticated)
    {
        <script src="https://www.google.com/recaptcha/api.js?render=@this.Configuration["GoogleReCaptcha:SiteKey"]"></script>
        <script>
            grecaptcha.ready(function () {
                grecaptcha.execute('@this.Configuration["GoogleReCaptcha:SiteKey"]', { action: 'create' }).then(function (token) {
                    document.getElementById("RecaptchaValue").value = token;
                });
            });
        </script>
        <script type="text/javascript" src="~/js/functions/favouriteButtonInRestaurantView.js" asp-append-version="true"></script>
        <script type="text/javascript" src="~/js/functions/votesAsync.js" asp-append-version="true"></script>
    }
    @if (this.User.FindFirstValue(ClaimTypes.NameIdentifier) == Model.UserId)
    {
        <script type="text/javascript" src="~/js/functions/manipulateImageInputForm.js" asp-append-version="true"></script>
        <script type="text/javascript" src="~/js/functions/addImageAsync.js" asp-append-version="true"></script>
    }
    <script type="text/javascript" src="~/js/functions/deleteCommentAsync.js" asp-append-version="true"></script>
    <script type="text/javascript">
        (() => {
            const updateBtns = document.getElementsByClassName('update-comment');

            Array.from(updateBtns).forEach(updateBtn => {
                updateBtn.addEventListener('click', function (e) {
                    e.preventDefault();
                    const href = this.href;

                    Array.from(document.getElementsByClassName('undo-button')).forEach(undoButton => {
                        undoButton.click();
                    });

                    // old comment body
                    const commentBody = this.parentNode.parentNode.getElementsByClassName('comment-content')[0];
                    const commentBodyParentNode = commentBody.parentNode;
                    commentBody.parentNode.removeChild(commentBody);

                    // form
                    const form = createDomElement('form', null, null, 'submit-form');
                    form.href = href;

                    // comment id
                    const commentIdDiv = createDomElement('div', null, ['form-group']);

                    const commentId = commentBodyParentNode.getElementsByClassName('comment-id')[0].textContent;
                    const commentIdInput = createDomElementWithValue('input', commentId, ['form-control'], null, true, true, 'number','commentId');

                    // new comment content
                    const commentContentDiv = createDomElement('div', null, ['form-group']);

                    const inputCommentValue = commentBody.textContent.trim();
                    const editableCommentBody = createDomElementWithValue('textarea', inputCommentValue, ['form-control', 'comment-content'], null, true, false, 'text', 'content');

                    commentIdDiv.appendChild(commentIdInput);
                    commentContentDiv.appendChild(editableCommentBody);

                    form.innerHTML = '@Html.AntiForgeryToken()';
                    form.appendChild(commentIdDiv);
                    form.appendChild(commentContentDiv);

                    form.setAttribute('asp-action', 'update');
                    commentBodyParentNode.appendChild(form);

                    const editButtonParentNode = this.parentNode;

                    const editButton = this;
                    const deleteButton = editButtonParentNode.getElementsByClassName('delete-comment')[0];

                    editButtonParentNode.removeChild(editButton);
                    editButtonParentNode.removeChild(deleteButton);

                    // submit button
                    const submitButton = createDomElement('button', null, ['text-primary', 'button-link']);
                    submitButton.innerHTML = '<i class="fas fa-check"></i> Submit';
                    submitButton.style.cursor = 'pointer';
                    submitButton.addEventListener('click', submit);

                    // return button
                    const returnButton = createDomElement('button', null, ['text-primary', 'button-link', 'undo-button']);
                    returnButton.innerHTML = 'Undo <i class="fas fa-undo"></i>';
                    returnButton.style.cursor = 'pointer';
                    returnButton.addEventListener('click', undo);

                    editButtonParentNode.prepend(submitButton);
                    editButtonParentNode.appendChild(returnButton);

                    const heading = commentBodyParentNode.getElementsByClassName('comment-heading')[0];
                    function submit(e) {
                        e.preventDefault();
                        const submitForm = document.getElementById('submit-form');
                        const token = submitForm.querySelector('input[name=__RequestVerificationToken]').value;
                        const json = {
                            content: submitForm.elements['content'].value,
                            commentId: +submitForm.elements['commentId'].value,
                        };

                        fetch(submitForm.href, {
                            method: 'POST',
                            headers: {
                                'X-CSRF-TOKEN': token,
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify(json)
                        })
                            .then(response => {
                                undo(e);
                                if (response.ok) {
                                    toastr.success('Successfully updated your comment!');

                                    if (!heading.getElementsByClassName('fa-pencil-alt')[0]) {
                                        const editedSmall = createDomElement('small', null, ['float-right', 'text-muted', 'd-block']);
                                        editedSmall.innerHTML = '<i class="fas fa-pencil-alt"></i> Edited';

                                        heading.appendChild(editedSmall);
                                    }
                                    return response.json();
                                } else {
                                    throw new Error();
                                }
                            })
                            .then(json => {
                                commentBody.textContent = json.content;
                            })
                            .catch(error => toastr.error('Something went wrong!'));
                    }

                    function undo(e) {
                        e.preventDefault();
                        commentBodyParentNode.removeChild(document.getElementById('submit-form'));
                        commentBodyParentNode.appendChild(commentBody);

                        editButtonParentNode.removeChild(submitButton);
                        editButtonParentNode.removeChild(returnButton);

                        editButtonParentNode.prepend(editButton);
                        editButtonParentNode.appendChild(deleteButton);
                    }
                })
            });

            function createDomElement(type, textContent, classList, id, href) {
                const element = document.createElement(type);

                element.textContent = textContent;

                if (href) {
                    element.href = href;
                }

                if (classList) {
                    element.classList.add(...classList);
                }

                if (id) {
                    element.setAttribute('id', id);
                }

                return element;
            }

            function createDomElementWithValue(type, value, classList, id, required, hidden, inputType, name) {
                const element = document.createElement(type);

                element.value = value;
                element.required = required;
                element.type = inputType;
                element.name = name;
                element.hidden = hidden;

                if (classList) {
                    element.classList.add(...classList);
                }

                if (id) {
                    element.setAttribute('id', id);
                }

                return element;
            }
        })();
    </script>
    <script type="text/javascript">
        async function getLatitude() {
            const address = $('dt:contains("Address")').next().text();
            const encodedAddress = encodeURI(address);
            const linkToFindLongtitudeAndLatitude = 'https://maps.googleapis.com/maps/api/geocode/json?address=' + encodedAddress + '&key=' + '@this.ViewBag.GoogleMapsApiKey';

            const result = await fetch(linkToFindLongtitudeAndLatitude)
                .then(response => response.json())

            var latitute = +result['results'][0]['geometry']['location']['lat'];
            var longitude = +result['results'][0]['geometry']['location']['lng'];

            return { latitute, longitude };
        }

        async function InitializeMap() {
            const result = await getLatitude();

            var latlng = new google.maps.LatLng(result.latitute, result.longitude);

            var myOptions = {
                zoom: 18,
                center: latlng,
                mapTypeId: google.maps.MapTypeId.ROADMAP
            };

            var map = new google.maps.Map(document.getElementById("map"), myOptions);

            var marker = new google.maps.Marker({
                position: latlng,
                map: map,
                title: '@Model.RestaurantName',
                animation: google.maps.Animation.DROP
            });
            marker.addListener('click', toggleBounce);

            function toggleBounce() {
                if (marker.getAnimation() !== null) {
                    marker.setAnimation(null);
                } else {
                    marker.setAnimation(google.maps.Animation.BOUNCE);
                }
            }
        }
    </script>
    <script src="https://maps.googleapis.com/maps/api/js?key=@this.ViewBag.GoogleMapsApiKey&callback=InitializeMap" async defer></script>
}
